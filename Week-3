=========================================================================================================
# SUBSETTING AND SORTING
=========================================================================================================

set.seed(13435)
x<- data.frame("var1"= sample(1:5), "var2"= sample(6:10), "var3"= sample(11:15) )
x
x<- x[sample(1:5), ]
x$var2[c(1,3)]= NA
x

x[ ,1]
x[, "var1"]

x[1:3, "var2"]

# Logical And and OR

x[(x$var1< 3 & x$var3>11), ]

x[(x$var1< 3 | x$var3>15), ]


x[which(x$var2>8), ]                # Which does not displays NAs

# Sorting

sort(x$var1)

sort(x$var1, decreasing= TRUE)

sort(x$var2)                        # Does not takes NA So follow

sort(x$var2, na.last= TRUE)

# Order

x[ order(x$var1), ]
x[ order(x$var1, x$var3), ]         # multiple ordering, orders 1 and then 3. FIFO

# Plyr for ordering

library(plyr)
arrage(x,var1)
arrage(x,desc(var1))

# Adding row and cols

x$var4<- rnorm(5)
x

y<- cbind (x, rnorm(5))
y

y<- rbind (x, rnorm(5))
y
=========================================================================================================
# SUMMARISING DATA
=========================================================================================================
  

fileUrl<- "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl, destfile="./data/restaurants.csv")

restData<- read.csv("./data/restaurants.csv")
  
head(restData, n=3)
tail(restData, n=3)
summary(restData)                 # char value factors and integrs min to max
str(restData)                     # class dimension variable factors
quantile(restData $ councilDistrict, na.rm=TRUE )     # for  quantity variable
quantile(restData $ councilDistrict, probs= c(0.5, 0.75, 0.9) )

table(restData $ zipCode, useNA= "ifany")   # value and frequency, by default excludes NA so use useNA 
table(restData $ councilDistrict, restData $ zipCode)     # 2 dimentional table , canbe used with diff qualitative variables

# Check for Missing values

sum (is.na (restData $ councilDistrict) )  # 1 if missing 0 if no missing
any (is.na (restData $ councilDistrict) )  # chk any value True if missing False if not

all(restData $ zipCode >0)                 # Chk negative values

colSums(is.na(restData))                    # sum for all columns
all(colSums(is.na(restData))==0)

# Values with specific characteristics

table(restData $ zipCode %in% c("21212") )
table(restData $ zipCode %in% c("21212", "21213") )

restData[restData $ zipCode %in% c("21212", "21213"), ]   # row subset

#cross tabs

data(UCBAdmissions)                    # inbuilt dataset
DF<- as.data.frame(UCBAdmissions)
summary(DF)

xt<- xtabs(Freq ~ Gender + Admit, data= DF)   # freq is values others are fields 
xt

# Flat Tables

warpbreaks$replicate<- rep(1:9, len= 54)             # inbuilt dataset
xt<- xtabs(breaks ~ ., data= warpbreaks)             # for multiple 2 dimentional tables
xt

ftable(xt)                                           # displays same as flat table

# Size of data

fakeData<- rnorm(1e5)
object.size(fakeData)
print(object.size(fakeData), units= "Mb")

=========================================================================================================
# CREATING NEW VARIABLES 
=========================================================================================================

# Creating sequences for indexing the data 
  
s1<- seq(1, 10); s1
s2<- seq(1, 10, by= 2); s2
s3<- seq(1, 10, length= 3); s3

x<- c(1, 3, 8, 25, 100); seq(along= x)

# Subsetting the variable

str(restData)
 
restData$ nearMe <-   restData$ neighborhood %in% c("Roland Park", "Homeland")
table(restData$ nearMe)


# Create Binary variables

restData$ zipcodeWrong <- ifelse( restData$ zipCode < 0, TRUE, FALSE )
table(restData$ zipcodeWrong, restData$ zipCode < 0)

# Create Categorical variables

restData$ zipGroups<- cut(restData$ zipCode, breaks= quantile(restData$ zipCode))
table(restData$ zipGroups)
table(restData$ zipGroups, restData$ zipCode)

or 

library(Hmisc)
restData$ zipGroups<- cut2(restData$ zipCode, g=4)             # g implies num of groups
table(restData$ zipGroups)

# Create Factor variables

restData$ zcf <- factor(restData$ zipCode)                     # changed this integer as factor
restData$ zcf[1:10]
class(restData$ zcf)

# Levels

yesno <- sample( c("yes", "no"), size= 10, replace= TRUE)
yesnofac<- factor(yesno, levels= c("yes", "no") )
relevel(yesnofac, ref="yes")
as.numeric(yesnofac)

# mutate function for new version of the variable and add simultaneously

library(Hmisc);library(plyr)

restData2<- mutate (restData, zipGroups= cut2(zipcode, g=4))
table(restData2$ zipGroups)


=========================================================================================================
# Reshaping Data 
=========================================================================================================
  
library(reshape2)
head(mtcars)                                # standard dataset

# menting data frames

mtcars$ carname <- rownames(mtcars)
carMelt <- melt(mtcars, id= c("carname", "gear", "cyl"), measure.vars= c(" mpg", "hp"))        # Specifying id and measure variables

head(carMelt, n=3)
tail(carMelt, n=3)

# Casting dataframe => Recast the shape into particular shape and dataframe

cylData <- dcast(carMelt, cys ~ variable)   # summerises and see cylinder broken by the variables which we specifiefd above
cylData

cylData <- dcast(carMelt, cys ~ variable, mean)  # col function i.e mean of the variables
cylData

# Average Values

head(InsectSprays)

tapply(InsectSprays$ count, InsectSprays$ spray, sum)
# tapply() Apply along the index of a particular function
# for each value of spray sums the count

# Second meathod Split way

spIns<- split(InsectSprays$ count, InsectSprays$ spray)
spIns
#take count and split bases of spray

sprCount<- lapply(spIns, sum)
sprCount
#lapply() apply across the list 

# Now combine in any of the two ways or with plyr packahge in one step

unlist(sprCount)

sapply(spIns, sum)

ddply(InsectSprays, .(spray), summarize, sum= sum(count))   # .(variable) shd be Summarised provided by sum of count

# Creating a new variable

spraySums<- ddply(InsectSprays, .(spray), summarize, sum= ave(count, FUN=sum)) 
dim(spraySums)

=========================================================================================================
# Managing Data Frames with dplyr - Introduction
=========================================================================================================
i left this important topic 
=========================================================================================================
# Managing Data Frames with dplyr - Basic Tools
=========================================================================================================
  i left this important topic   

=========================================================================================================
# Merging Data 
=========================================================================================================
  
filUrl1 <- "filUrl1" 
fileUrl2 <- "filUrl2"
download.file(filUrl1, destfile= "./data/reviews.csv")
download.file(filUrl2, destfile= "./data/solutions.csv")

reviews<- read.csv("./data/reviews.csv")
solutions<- read.csv("./data/solutions.csv")

head(reviews, 2)
head(solutions, 2)

# Solution id in reviews corresponds to id in solutions dataset and using this to merge the data sets

names(reviews)
names(solutions)

# Important parameters x, y, by, by.x, by.y, all and all is default

mergedData<- merge(reviews, solutions, by.x= "solutions_id", by.y= "id", all=TRUE)  # all true if value occurs in one and not another it shd include another row
head(mergedData)

intersect(names(solutions), names(reviews))
mergedData2<- merge(reviews, solutions, all= TRUE)
head(mergedData2)

# Join in plyr packages- Faster but less featured defaults to left join , Advantage with multiple dataset its wasy than merge

df1<- data.frame(id= sample(1:10), x= rnorm(10))
df2<- data.frame(id= sample(1:10), y= rnorm(10))
arrange(join(df1, df2), id)

df1<- data.frame(id= sample(1:10), x= rnorm(10))
df2<- data.frame(id= sample(1:10), y= rnorm(10))
df3<- data.frame(id= sample(1:10), z= rnorm(10))
dfList<- list(df1, df2, df3)
join_all(dfList)


              












